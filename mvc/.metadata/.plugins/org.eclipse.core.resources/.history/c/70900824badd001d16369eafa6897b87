package com.ust.rest.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ust.rest.repository.ProductRepository;
import com.ust.rest.repository.UserRepository;
import com.ust.rest.resource.Product;
@Service
public class ProductService {
	@Autowired
	ProductRepository productRepository;
	@Autowired
	UserRepository userRepository;
	
	 public Product getProduct(long productId) { 
		 Optional<Product>optional=productRepository.findById(null);
		 if(optional.isPresent()) {
			 return optional.get();
		 }
	 else {
		 return null;
	 }
}


	 public List<Product> getProducts(){
		 return productRepository.findAll();
	 }
@Transactional //we can use @Transactional to wrap a method in a database transaction
// it allow us to get propagation,isolation,timeout,read-only and rollback conditions for transaction
 public boolean add(Product product) {
		/*
		 * if(validate(product)) { return false;//cannot create duplicate product } else
		 * { productRepository.save(product); return true; }
		 */
	productRepository.save(product);
	User user=new User();
			user.setDateTime(System.currentTimeMillis()+" ");
	}
 public boolean validate(Product product) {
	 if(product.getName().equals("lenova")) {
		 return true;
		 
	 }
	 else {
		 return false;
	 }
 }
 
	 public Product updateProduct(Product product) { return
	  productRepository.save(product); 
	 }
	 public void deleteProduct(long productId) 
	 { productRepository.deleteById(productId); }
	
}
