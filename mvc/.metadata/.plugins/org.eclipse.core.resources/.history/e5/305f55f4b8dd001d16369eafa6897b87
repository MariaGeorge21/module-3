package com.ust.rest.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.ust.rest.repository.ProductRepository;
import com.ust.rest.repository.UserRepository;
import com.ust.rest.resource.Product;
@Service
public class ProductService {
	@Autowired
	ProductRepository repository;
	@Autowired
	UserRepository userRepository;
	
	 public Product getProduct(long productId) { 
		 Optional<Product>optional=repository.findById(null);
		 if(optional.isPresent()) {
			 return optional.get();
		 }
	 else {
		 return null;
	 }
}


	 public List<Product> getProducts(){
		 return repository.findAll();
	 }
@Transactional //we can use @Transactional to wrap a method in a database transaction
// it allow us to get propagation,isolation,timeout,read-only and rollback conditions for transaction
 public boolean add(Product product) {
		 if(validate(product)) {
			 return false;//cannot create duplicate product
		 }
		 else {
			 repository.save(product);
		return true;
		 }
	}
 public boolean validate(Product product) {
	 if(product.getName().equals("lenova")) {
		 return true;
		 
	 }
	 else {
		 return false;
	 }
 }
 
	 public Product updateProduct(Product product) { return
	  repository.save(product); 
	 }
	 public void deleteProduct(long productId) 
	 { repository.deleteById(productId); }
	
}
